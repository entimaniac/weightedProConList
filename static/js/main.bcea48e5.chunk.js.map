{"version":3,"sources":["Editable.js","ProConItem.js","ProConList.js","App.js","serviceWorker.js","index.js"],"names":["Editable","props","useState","editing","isEditing","setEditing","useEffect","childRef","current","focus","onBlur","onKeyDown","e","event","type","key","keys","allKeys","indexOf","handleKeyDown","children","onClick","text","placeholder","ProConItem","messageRef","React","useRef","scoreRef","className","proConType","message","ref","name","value","onChange","editMessage","id","score","min","editScore","remove","ProConList","createRef","addItem","listName","deepCopy","JSON","parse","stringify","state","push","defaultMessage","defaultScore","index","setState","calculateScore","removeItem","filteredList","filter","item","addPro","removePro","addCon","removeCon","editItem","find","i","target","prosScore","consScore","pros","pro","parseInt","cons","con","total","handleChangeName","this","map","Component","App","addList","lists","listNameInput","removeList","list","handleListNameInputChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.bcea48e5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nexport default function Editable(props) {\n  const [isEditing, setEditing] = useState(props.editing);\n\n  useEffect(() => {\n    if (props.childRef && props.childRef.current && isEditing === true) {\n      props.childRef.current.focus();\n    }\n  }, [isEditing, props.childRef]);\n\n  const handleKeyDown = (event, type) => {\n    const { key } = event;\n    const keys = [\"Escape\", \"Tab\"];\n    const enterKey = \"Enter\";\n    const allKeys = [...keys, enterKey]; // All keys array\n\n    /*\n      - For textarea, check only Escape and Tab key and set the state to false\n      - For everything else, all three keys will set the state to false\n    */\n    if (\n      (type === \"textarea\" && keys.indexOf(key) > -1) ||\n      (type !== \"textarea\" && allKeys.indexOf(key) > -1)\n    ) {\n      setEditing(false);\n    }\n  };\n\n  return (\n    <section>\n      {isEditing ? (\n        <div\n          onBlur={() => setEditing(false)}\n          onKeyDown={(e) => handleKeyDown(e, props.type)}\n        >\n          {props.children}\n        </div>\n      ) : (\n        <div onClick={() => setEditing(true)}>\n          <span>{props.text || props.placeholder}</span>\n        </div>\n      )}\n    </section>\n  );\n}\n\n// export default Editable;\n","import React from \"react\";\nimport \"./ProConItem.css\";\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport Editable from \"./Editable\";\n\nexport default function ProConItem(props) {\n  const messageRef = React.useRef();\n  const scoreRef = React.useRef();\n\n  return (\n    <div className={`${props.proConType} pro-con-item grid-container`}>\n      <span>\n        <Editable\n          text={props.message}\n          type=\"input\"\n          childRef={messageRef}\n          placeholder=\"Enter text\"\n          editing={true}\n        >\n          <input\n            className=\"text-input\"\n            ref={messageRef}\n            type=\"text\"\n            name=\"task\"\n            value={props.message}\n            onChange={(e) => props.editMessage(e, props.id, props.proConType)}\n          />\n        </Editable>\n      </span>\n      <span className={\"score\"}>\n        <Editable text={props.score} type=\"input\" childRef={scoreRef}>\n          <input\n            className=\"score-input\"\n            ref={scoreRef}\n            type=\"number\"\n            min={0}\n            name=\"task\"\n            value={props.score}\n            onChange={(e) => props.editScore(e, props.id, props.proConType)}\n          />\n        </Editable>\n      </span>\n      <span>\n        <button\n          className={\"remove-button\"}\n          onClick={() => props.remove(props.id, props.score)}\n        >\n          <FaTrashAlt />\n        </button>\n      </span>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ProConItem from \"./ProConItem\";\nimport \"./ProConList.css\";\nimport { FaPlus } from \"react-icons/fa\";\nimport { FaTrashAlt } from \"react-icons/fa\";\nimport Editable from \"./Editable\";\n\nexport default class ProConList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"New List\",\n      pros: [],\n      cons: [],\n      defaultMessage: \"\",\n      defaultScore: 1,\n      index: 0,\n      total: 0,\n    };\n  }\n\n  messageRef = React.createRef();\n\n  addItem = (listName) => {\n    let deepCopy = JSON.parse(JSON.stringify(this.state[listName]));\n\n    deepCopy.push({\n      message: this.state.defaultMessage,\n      score: this.state.defaultScore,\n      id: this.state.index,\n    });\n\n    this.setState({ [listName]: deepCopy });\n    this.setState({ index: this.state.index + 1 }, () => this.calculateScore());\n  };\n\n  removeItem = (listName, id, score) => {\n    let deepCopy = JSON.parse(JSON.stringify(this.state[listName]));\n    let filteredList = deepCopy.filter(function (item) {\n      return item.id !== id;\n    });\n    this.setState({ [listName]: filteredList }, () => this.calculateScore());\n  };\n\n  addPro = () => {\n    this.addItem(\"pros\");\n  };\n\n  removePro = (id, score) => {\n    this.removeItem(\"pros\", id, score);\n  };\n\n  addCon = () => {\n    this.addItem(\"cons\");\n  };\n\n  removeCon = (id, score) => {\n    this.removeItem(\"cons\", id, score);\n  };\n\n  editItem = (listName, id, key, value) => {\n    let deepCopy = JSON.parse(JSON.stringify(this.state[listName]));\n\n    deepCopy.find((item, i) => {\n      if (item.id === id) {\n        deepCopy[i][key] = value;\n        return true;\n      }\n      return false;\n    });\n    this.setState({ [listName]: deepCopy }, () => this.calculateScore());\n  };\n\n  editMessage = (event, id, proConType) => {\n    let listName = proConType + \"s\";\n    this.editItem(listName, id, \"message\", event.target.value);\n  };\n\n  editScore = (event, id, proConType) => {\n    let score = event.target.value;\n    let listName;\n    if (proConType === \"pro\") {\n      listName = \"pros\";\n    } else {\n      listName = \"cons\";\n    }\n    this.editItem(listName, id, \"score\", score);\n  };\n\n  calculateScore = () => {\n    let prosScore = 0;\n    let consScore = 0;\n    for (let pro of this.state.pros) {\n      prosScore += parseInt(pro.score) || 0;\n    }\n    for (let con of this.state.cons) {\n      consScore += parseInt(con.score) || 0;\n    }\n    this.setState({ total: prosScore - consScore });\n  };\n\n  handleChangeName = (event) => {\n    this.setState({ name: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"list-container\">\n        <div className=\"title\">\n          <h3>\n            <Editable\n              text={this.state.name}\n              type=\"input\"\n              childRef={this.messageRef}\n              placeholder=\"Enter text\"\n              editing={false}\n            >\n              <input\n                className=\"text-input\"\n                ref={this.messageRef}\n                type=\"text\"\n                name=\"task\"\n                value={this.state.name}\n                onChange={(e) => this.handleChangeName(e)}\n              />\n            </Editable>\n          </h3>\n        </div>\n        <div>\n          TOTAL: {this.state.total}\n          <button\n            className=\"remove-list-button\"\n            onClick={() => this.props.remove(this.props.id)}\n          >\n            <FaTrashAlt />\n          </button>\n        </div>\n\n        <div className=\"list\">\n          <div>PROS</div>\n          {this.state.pros.map((item) => {\n            return (\n              <div key={item.id}>\n                <ProConItem\n                  id={item.id}\n                  message={item.message}\n                  score={item.score}\n                  proConType={\"pro\"}\n                  editMessage={this.editMessage}\n                  editScore={this.editScore}\n                  remove={this.removePro}\n                />\n              </div>\n            );\n          })}\n          <button className=\"add-list-item-button\" onClick={this.addPro}>\n            <FaPlus />\n          </button>\n        </div>\n        <div className=\"list\">\n          <div>CONS</div>\n          {this.state.cons.map((item, index) => {\n            return (\n              <ProConItem\n                key={item.id}\n                id={item.id}\n                message={item.message}\n                score={item.score}\n                proConType={\"con\"}\n                editMessage={this.editMessage}\n                editScore={this.editScore}\n                remove={this.removeCon}\n              />\n            );\n          })}\n          <button className=\"add-list-item-button\" onClick={this.addCon}>\n            <FaPlus />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport ProConList from \"./ProConList\";\nimport { FaPlus } from \"react-icons/fa\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lists: [],\n      listNameInput: \"test\",\n      index: 0,\n    };\n  }\n\n  addList = () => {\n    let lists = this.state.lists;\n\n    lists.push({ id: this.state.index });\n    this.setState({ listNameInput: \"\" });\n    this.setState({ lists: lists });\n    this.setState({ index: this.state.index + 1 });\n  };\n\n  removeList = (id) => {\n    this.setState({\n      lists: this.state.lists.filter(function (list) {\n        return list.id !== id;\n      }),\n    });\n  };\n\n  handleListNameInputChange = (event) => {\n    this.setState({ listNameInput: event.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"the-page\">\n        <h1>WEIGHTED PRO VS. CON LIST!</h1>\n        <h4>\n          Ever want to decide if something is worth it? So you make a pro-con\n          list only and tally up the pros and the cons and find that you have 10\n          pros against only 5 cons but then you throw it all out because you\n          realize how can you say that yea, maybe the job you are thinking of\n          taking is 5 minutes closer (+1 pro) but it pays $40,000 dollars less(\n          -1 con). You need an easy way to show that the money is 80x more\n          important than the shorter commute!\n        </h4>\n        <div className=\"scrolling-wrapper\">\n          {this.state.lists.map((item) => {\n            return (\n              <div className=\"scroll-item\" key={item.id}>\n                <ProConList\n                  className=\"scroll-item\"\n                  id={item.id}\n                  name={item.name}\n                  remove={this.removeList}\n                />\n              </div>\n            );\n          })}\n          <button className=\"add-list-button\" onClick={this.addList}>\n            <FaPlus />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}